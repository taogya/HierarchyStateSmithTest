// Autogenerated with StateSmith 0.19.0+b5719011215d41a81572ed347c02b22db5d1a48f.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Whatever you put in this `FileTop` section will end up 
// being printed at the top of every generated code file.

#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/blob/main/docs/settings.md
#include <stdint.h>
    

typedef enum HierarchySm_EventId
{
    HierarchySm_EventId_GOTO_PROC = 0,
    HierarchySm_EventId_GOTO_WAIT = 1,
    HierarchySm_EventId_PROC_EXEC = 2,
    HierarchySm_EventId_PROC_MULTI = 3,
    HierarchySm_EventId_PROC_OFF = 4,
    HierarchySm_EventId_PROC_ON = 5,
    HierarchySm_EventId_PROC_SINGLE = 6,
    HierarchySm_EventId_PROC_WAIT = 7
} HierarchySm_EventId;

enum
{
    HierarchySm_EventIdCount = 8
};

typedef enum HierarchySm_StateId
{
    HierarchySm_StateId_ROOT = 0,
    HierarchySm_StateId_INIT = 1,
    HierarchySm_StateId_PROC = 2,
    HierarchySm_StateId_PROC_OFF = 3,
    HierarchySm_StateId_PROC_ON = 4,
    HierarchySm_StateId_PROC_ON_EXEC = 5,
    HierarchySm_StateId_PROC_ON_EXEC_MULTI = 6,
    HierarchySm_StateId_PROC_ON_EXEC_SINGLE = 7,
    HierarchySm_StateId_PROC_ON_WAIT = 8,
    HierarchySm_StateId_WAIT = 9
} HierarchySm_StateId;

enum
{
    HierarchySm_StateIdCount = 10
};

typedef enum HierarchySm_PROC_HistoryId
{
    HierarchySm_PROC_HistoryId_PROC_OFF = 0, // default transition
    HierarchySm_PROC_HistoryId_PROC_ON = 1,
    HierarchySm_PROC_HistoryId_PROC_ON_WAIT = 2,
    HierarchySm_PROC_HistoryId_PROC_ON_EXEC = 3,
    HierarchySm_PROC_HistoryId_PROC_ON_EXEC_SINGLE = 4,
    HierarchySm_PROC_HistoryId_PROC_ON_EXEC_MULTI = 5
} HierarchySm_PROC_HistoryId;


typedef enum HierarchySm_PROC_ON_EXEC_HistoryId
{
    HierarchySm_PROC_ON_EXEC_HistoryId_PROC_ON_EXEC_SINGLE = 0, // default transition
    HierarchySm_PROC_ON_EXEC_HistoryId_PROC_ON_EXEC_MULTI = 1
} HierarchySm_PROC_ON_EXEC_HistoryId;


// Generated state machine
// forward declaration
typedef struct HierarchySm HierarchySm;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct HierarchySm_Vars
{
    HierarchySm_PROC_HistoryId PROC_history;
    HierarchySm_PROC_ON_EXEC_HistoryId PROC_ON_EXEC_history;
} HierarchySm_Vars;


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void HierarchySm_ctor(HierarchySm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void HierarchySm_start(HierarchySm* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void HierarchySm_dispatch_event(HierarchySm* sm, HierarchySm_EventId event_id);

// Thread safe.
char const * HierarchySm_state_id_to_string(HierarchySm_StateId id);

// Thread safe.
char const * HierarchySm_event_id_to_string(HierarchySm_EventId id);

// Generated state machine
struct HierarchySm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    HierarchySm_StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    HierarchySm_Vars vars;
};

